// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package storage is a generated GoMock package.
package storage

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorager is a mock of Storager interface.
type MockStorager struct {
	ctrl     *gomock.Controller
	recorder *MockStoragerMockRecorder
}

// MockStoragerMockRecorder is the mock recorder for MockStorager.
type MockStoragerMockRecorder struct {
	mock *MockStorager
}

// NewMockStorager creates a new mock instance.
func NewMockStorager(ctrl *gomock.Controller) *MockStorager {
	mock := &MockStorager{ctrl: ctrl}
	mock.recorder = &MockStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorager) EXPECT() *MockStoragerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStorager) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStoragerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorager)(nil).Close))
}

// FindIDByURL mocks base method.
func (m *MockStorager) FindIDByURL(url string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindIDByURL", url)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// FindIDByURL indicates an expected call of FindIDByURL.
func (mr *MockStoragerMockRecorder) FindIDByURL(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindIDByURL", reflect.TypeOf((*MockStorager)(nil).FindIDByURL), url)
}

// GetUserURLs mocks base method.
func (m *MockStorager) GetUserURLs(userID string) ([]UserURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserURLs", userID)
	ret0, _ := ret[0].([]UserURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserURLs indicates an expected call of GetUserURLs.
func (mr *MockStoragerMockRecorder) GetUserURLs(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserURLs", reflect.TypeOf((*MockStorager)(nil).GetUserURLs), userID)
}

// Load mocks base method.
func (m *MockStorager) Load(id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockStoragerMockRecorder) Load(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockStorager)(nil).Load), id)
}

// MarkUserURLsDeleted mocks base method.
func (m *MockStorager) MarkUserURLsDeleted(userID string, shortIDs []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkUserURLsDeleted", userID, shortIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkUserURLsDeleted indicates an expected call of MarkUserURLsDeleted.
func (mr *MockStoragerMockRecorder) MarkUserURLsDeleted(userID, shortIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkUserURLsDeleted", reflect.TypeOf((*MockStorager)(nil).MarkUserURLsDeleted), userID, shortIDs)
}

// Ping mocks base method.
func (m *MockStorager) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockStoragerMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockStorager)(nil).Ping))
}

// Save mocks base method.
func (m *MockStorager) Save(id, url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", id, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockStoragerMockRecorder) Save(id, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockStorager)(nil).Save), id, url)
}

// SaveBatch mocks base method.
func (m *MockStorager) SaveBatch(urls map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBatch", urls)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBatch indicates an expected call of SaveBatch.
func (mr *MockStoragerMockRecorder) SaveBatch(urls interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBatch", reflect.TypeOf((*MockStorager)(nil).SaveBatch), urls)
}

// SaveBatchUserURLs mocks base method.
func (m *MockStorager) SaveBatchUserURLs(userID string, batch map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBatchUserURLs", userID, batch)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBatchUserURLs indicates an expected call of SaveBatchUserURLs.
func (mr *MockStoragerMockRecorder) SaveBatchUserURLs(userID, batch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBatchUserURLs", reflect.TypeOf((*MockStorager)(nil).SaveBatchUserURLs), userID, batch)
}

// SaveUserURL mocks base method.
func (m *MockStorager) SaveUserURL(userID, shortID, originalURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUserURL", userID, shortID, originalURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUserURL indicates an expected call of SaveUserURL.
func (mr *MockStoragerMockRecorder) SaveUserURL(userID, shortID, originalURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUserURL", reflect.TypeOf((*MockStorager)(nil).SaveUserURL), userID, shortID, originalURL)
}
